{"version":3,"sources":["util.ts","Board.ts","boggle.ts","WordInput.ts","fetch.ts","App.ts","serviceWorker.js","index.js"],"names":["dom","React","Board","this","props","boardMatrix","map","row","i","key","letter","j","Component","makeBoggleBoard","boardSize","r","Math","floor","random","getRow","getRange","val","BOARD_SIZE","findNeighbors","idx","word","prevCoord","usedCoords","board","length","neighbors","candidate","coords","col","getNeighborLetters","x","startBoard","startingCandidates","findLetterCandidates","WordInput","state","_this2","onChange","evt","setState","target","value","onClick","submitGuess","console","log","fetch","require","fetchWord","concat","method","headers","X-RapidAPI-Key","App","boggleBoard","correctWords","checkGuess","_this","alert","split","then","resp","ok","style","margin","alignText","display","justifyContent","width","height","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6c821a6.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport const dom = React.createElement;","import {Component} from \"react\";\nimport { dom } from \"./util\";\n\ntype Props = {\n    boardMatrix: string[][]\n}\n\nclass Board extends Component<Props, {}> {\n    render() {\n        return dom(\"table\", {}, \n            dom(\"tbody\", {},\n            this.props.boardMatrix.map((row: string[], i: number) => \n                dom(\"tr\", {key: i}, \n                    row.map((letter: string, j: number) => \n                        dom(\"td\", {key: j}, letter)\n                    )\n                )\n            )\n        ))\n    }\n}\n\nexport default Board;","import * as r from \"ramda\";\n\nconst ALPHA = \"abcdefghijklmnopqrstuvwxyz\"\n\nconst BOARD_SIZE = 5\n\ntype Neighbor = {\n    coords: Coordinate,\n    letter: string\n}\n\ntype BoggleBoard = string[][]\n\ntype Coordinate = [number, number]\n\nconst getRow = (boardSize: number) => \n  r.map(() => ALPHA[Math.floor(Math.random() * boardSize + 1)], r.range(0, boardSize))\n\nexport const makeBoggleBoard = (boardSize: number): BoggleBoard => r.map(() => getRow(boardSize), r.range(0, boardSize))\n\nexport const getRange = (val: number): number[] =>\n  r.range(\n    val > 0 ? val - 1 : val,\n    val < BOARD_SIZE - 1 ? val + 2 : val + 1\n  )\n\nexport const getNeighborLetters = (row: number, col: number, board: BoggleBoard): Neighbor[] => {\n  return r.unnest(getRange(row).map(\n    (i: number) => {\n      return getRange(col).map(\n        (j: number): Neighbor => {\n          return {coords: [i, j], letter: board[i][j]}\n        }\n      )\n    }\n  ))\n}\n\nexport const findLetterCandidates = (letter: string, board: BoggleBoard): Coordinate[] => \n    r.unnest(r.range(0, board.length).map(\n      (i: number) => \n        r.reject(r.isNil, \n          r.range(0, board.length).map(\n            (j: number) => \n              board[i][j] === letter \n                ? [i, j] \n                : null\n          )\n        )\n    )) as Coordinate[]\n\nexport const findNeighbors = (idx: number, word: string[], prevCoord: Coordinate, usedCoords: Coordinate[], board: BoggleBoard): boolean => {\n  // Base Case; made whole word\n  if (idx === word.length) {\n    return true\n  }\n\n  // Base Case: could not find next letter\n  const neighbors = r.filter(\n    (candidate: Neighbor) => candidate.letter === word[idx] && !r.contains(candidate.coords, usedCoords),\n    getNeighborLetters(prevCoord[0], prevCoord[1], board)\n  )\n\n  if (neighbors.length === 0) {\n    return false\n  }\n\n  // Recursive case: have neighbor candidates to check\n  return r.any((x) => x, neighbors.map(\n    (candidate) => findNeighbors(\n      idx + 1, \n      word, \n      candidate.coords, \n      r.append(candidate.coords, usedCoords),\n      board\n    )\n  ))\n}\n\n\nexport const startBoard = (word: string[], board: BoggleBoard) => {\n  const startingCandidates = findLetterCandidates(word[0], board)\n  \n  for (let i in startingCandidates) {\n    if (findNeighbors(1, word, startingCandidates[i], [startingCandidates[i]], board)) {\n      return true\n    }\n  }\n  return false \n}\n","import {Component} from \"react\";\nimport { dom } from \"./util\";\n\ntype Props = {\n    submitGuess: (word: string) => void;\n}\n\ntype State = {\n    word: string;\n}\n\nclass WordInput extends Component<Props, State> {\n    state: State = {\n        word: \"\"\n    }\n\n    render() {\n        return dom(\"div\", {}, \n            dom(\"input\", {\n                onChange: (evt) => this.setState({word: evt.target.value}),\n                value: this.state.word\n            }),\n            dom(\"button\", {onClick: () => {\n                if (this.state.word.length >= 3) {\n                    this.setState({word: \"\"})\n                    this.props.submitGuess(this.state.word)\n                }\n                else {\n                    console.log(\"Should be longer than 2 letters\")\n                }\n            }}, \"Submit Guess\")\n        )\n    }\n}\n\nexport default WordInput;","const fetch = require('node-fetch');\n\nexport const fetchWord: any = (word: string) => fetch(\n  `https://wordsapiv1.p.mashape.com/words/${word}`,\n  {\n    method: 'GET',\n    // this is obviously super unsafe and should be handled with environment variables!\n    // gh pages doesn't allow you to do that unfortunately!!!\n    headers: {\"X-RapidAPI-Key\": \"9cec01def3mshbab011fd8d8f4a4p12ebf8jsn00b43fb8e433\"}\n  },\n);","import { Component } from 'react';\nimport Board from \"./Board\"\nimport { dom } from './util';\nimport { makeBoggleBoard, startBoard } from './boggle';\nimport WordInput from './WordInput';\nimport { fetchWord } from './fetch';\nimport * as r from \"ramda\"\n\nclass App extends Component {\n  state = {\n    boggleBoard: [],\n    correctWords: []\n  }\n\n  checkGuess = (word: string): void => {\n    // Check if they've already submitted the word\n    if (r.contains(word, this.state.correctWords)) {\n      alert(\"Already guessed word\")\n      return\n    }\n    // Find if it is in the matrix\n    const inBoard = startBoard(word.split(\"\"), this.state.boggleBoard)\n    if (!inBoard) {\n      alert(\"Word not in board\");\n      return\n    }\n    // Find if it is a real word\n    return fetchWord(word).then(\n      (resp:any) => {\n        if (resp.ok) {\n          this.setState({correctWords: r.append(word, this.state.correctWords)})\n        }\n        else {\n          alert(\"Word does not exist!\")\n        }\n      }\n    )\n  }\n\n  render() {\n    return dom(\n      \"div\", {style: {margin: \"5em\", alignText: \"center\"}},\n      dom('div', {style: {display: \"flex\", justifyContent: \"center\"}},\n        dom(\"h1\", {}, \"Let's Play Boggle!\")\n      ),\n      dom(\"div\", {style: {display: \"flex\", justifyContent: \"center\"}}, \n        dom(\"button\", {\n          onClick: () => this.setState({boggleBoard: makeBoggleBoard(4)}), \n          style: {width: \"200px\", height: \"25px\", alignText: \"center\"}}, \"Make New Boggle Board\"\n        )\n      ),\n      dom(\"div\", {style: {display: \"flex\", justifyContent: \"center\", marginTop: \"1em\"}},\n        dom(Board, {boardMatrix: this.state.boggleBoard}),\n      ),\n      dom(\"div\", {style: {display: \"flex\", justifyContent: \"center\", marginTop: \"1em\"}},\n        this.state.boggleBoard.length ? \n          dom(WordInput, {\n            submitGuess: (word: string) => this.checkGuess(word)\n          })\n          : null\n        ),\n    dom(\"div\", {style: {display: \"flex\", justifyContent: \"center\", marginTop: \"1em\"}},\n        this.state.boggleBoard.length ? \n          dom(\"ul\", {},\n            r.map((word: string) => dom(\"li\", {key: word}, word), this.state.correctWords)\n           )\n          : null\n        )\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}